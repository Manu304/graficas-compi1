
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mrojas.graficoscompi1.analizadores.parser;

import java_cup.runtime.*;
import java.util.*;
import com.mrojas.graficoscompi1.graphics.*;
import com.mrojas.graficoscompi1.analizadores.*;
import com.mrojas.graficoscompi1.model.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    @Deprecated
    public Parser() {super();}

    /** Constructor which sets the default scanner. */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\055\000\002\002\004\000\002\002\004\000\002\003" +
                            "\010\000\002\003\007\000\002\004\010\000\002\004\007" +
                            "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
                            "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
                            "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
                            "\003\000\002\006\003\000\002\006\003\000\002\007\005" +
                            "\000\002\010\007\000\002\011\007\000\002\012\007\000" +
                            "\002\013\007\000\002\014\007\000\002\015\005\000\002" +
                            "\015\005\000\002\016\005\000\002\017\005\000\002\020" +
                            "\011\000\002\020\007\000\002\020\004\000\002\022\005" +
                            "\000\002\022\003\000\002\022\004\000\002\021\005\000" +
                            "\002\021\003\000\002\021\004\000\002\023\005\000\002" +
                            "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
                            "\005\000\002\023\004\000\002\023\003\000\002\023\003" +
                            "" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\147\000\004\025\006\001\002\000\004\027\143\001" +
                            "\002\000\004\002\142\001\002\000\004\026\007\001\002" +
                            "\000\004\016\010\001\002\000\026\003\027\030\024\031" +
                            "\032\032\031\033\030\034\014\035\020\036\017\041\022" +
                            "\042\026\001\002\000\004\021\ufff7\001\002\000\004\021" +
                            "\140\001\002\000\004\021\ufff8\001\002\000\004\022\134" +
                            "\001\002\000\004\021\ufff1\001\002\000\004\021\ufff0\001" +
                            "\002\000\004\022\131\001\002\000\004\022\125\001\002" +
                            "\000\004\021\ufff3\001\002\000\004\022\123\001\002\000" +
                            "\004\021\ufff2\001\002\000\004\022\121\001\002\000\004" +
                            "\021\ufff4\001\002\000\004\022\117\001\002\000\026\003" +
                            "\027\030\024\031\032\032\031\033\030\034\014\035\020" +
                            "\036\017\041\022\042\026\001\002\000\004\022\105\001" +
                            "\002\000\004\022\074\001\002\000\004\022\040\001\002" +
                            "\000\004\021\ufff5\001\002\000\004\017\036\001\002\000" +
                            "\004\021\ufff6\001\002\000\006\025\006\027\ufffe\001\002" +
                            "\000\004\027\uffff\001\002\000\004\014\041\001\002\000" +
                            "\006\003\043\016\042\001\002\000\012\004\050\005\047" +
                            "\007\052\012\051\001\002\000\006\003\043\016\042\001" +
                            "\002\000\004\015\045\001\002\000\004\021\uffee\001\002" +
                            "\000\004\015\uffe3\001\002\000\024\006\uffd5\007\uffd5\010" +
                            "\uffd5\011\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5" +
                            "\001\002\000\024\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013" +
                            "\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\001\002\000\012" +
                            "\004\050\005\047\007\052\012\051\001\002\000\012\004" +
                            "\050\005\047\007\052\012\051\001\002\000\014\006\060" +
                            "\007\057\010\055\011\056\020\054\001\002\000\012\004" +
                            "\050\005\047\007\052\012\051\001\002\000\012\004\050" +
                            "\005\047\007\052\012\051\001\002\000\012\004\050\005" +
                            "\047\007\052\012\051\001\002\000\012\004\050\005\047" +
                            "\007\052\012\051\001\002\000\012\004\050\005\047\007" +
                            "\052\012\051\001\002\000\024\006\uffdc\007\uffdc\010\055" +
                            "\011\056\013\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc\001" +
                            "\002\000\024\006\uffdb\007\uffdb\010\055\011\056\013\uffdb" +
                            "\015\uffdb\017\uffdb\020\uffdb\021\uffdb\001\002\000\024\006" +
                            "\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\015\uffd9\017\uffd9" +
                            "\020\uffd9\021\uffd9\001\002\000\024\006\uffda\007\uffda\010" +
                            "\uffda\011\uffda\013\uffda\015\uffda\017\uffda\020\uffda\021\uffda" +
                            "\001\002\000\014\006\060\007\057\010\055\011\056\017" +
                            "\066\001\002\000\006\015\uffe4\020\067\001\002\000\006" +
                            "\003\043\016\042\001\002\000\004\015\uffe5\001\002\000" +
                            "\024\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\015\uffd7" +
                            "\017\uffd7\020\uffd7\021\uffd7\001\002\000\014\006\060\007" +
                            "\057\010\055\011\056\013\073\001\002\000\024\006\uffd8" +
                            "\007\uffd8\010\uffd8\011\uffd8\013\uffd8\015\uffd8\017\uffd8\020" +
                            "\uffd8\021\uffd8\001\002\000\004\014\075\001\002\000\006" +
                            "\003\076\024\100\001\002\000\006\003\076\024\100\001" +
                            "\002\000\004\015\103\001\002\000\006\015\uffe1\020\101" +
                            "\001\002\000\006\003\076\024\100\001\002\000\004\015" +
                            "\uffe2\001\002\000\004\021\uffed\001\002\000\004\015\uffe0" +
                            "\001\002\000\004\014\106\001\002\000\014\003\107\004" +
                            "\050\005\047\007\052\012\051\001\002\000\014\003\107" +
                            "\004\050\005\047\007\052\012\051\001\002\000\004\015" +
                            "\114\001\002\000\016\006\060\007\057\010\055\011\056" +
                            "\015\uffde\020\112\001\002\000\014\003\107\004\050\005" +
                            "\047\007\052\012\051\001\002\000\004\015\uffdf\001\002" +
                            "\000\004\021\uffec\001\002\000\004\015\uffdd\001\002\000" +
                            "\004\017\ufff9\001\002\000\004\024\120\001\002\000\004" +
                            "\021\uffe6\001\002\000\004\024\122\001\002\000\004\021" +
                            "\uffef\001\002\000\012\004\050\005\047\007\052\012\051" +
                            "\001\002\000\014\006\060\007\057\010\055\011\056\021" +
                            "\uffe7\001\002\000\004\014\126\001\002\000\014\003\107" +
                            "\004\050\005\047\007\052\012\051\001\002\000\004\015" +
                            "\130\001\002\000\004\021\uffea\001\002\000\006\037\132" +
                            "\040\133\001\002\000\004\021\uffe9\001\002\000\004\021" +
                            "\uffe8\001\002\000\004\014\135\001\002\000\006\003\076" +
                            "\024\100\001\002\000\004\015\137\001\002\000\004\021" +
                            "\uffeb\001\002\000\030\003\027\017\ufffa\030\024\031\032" +
                            "\032\031\033\030\034\014\035\020\036\017\041\022\042" +
                            "\026\001\002\000\004\017\ufffb\001\002\000\004\002\001" +
                            "\001\002\000\004\012\145\001\002\000\004\002\000\001" +
                            "\002\000\004\024\146\001\002\000\004\013\147\001\002" +
                            "\000\004\021\150\001\002\000\006\002\ufffc\027\143\001" +
                            "\002\000\004\002\ufffd\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\147\000\006\002\004\003\003\001\001\000\004\004" +
                            "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\030\005\033\006\011\007\012\010\010\011" +
                            "\034\012\032\013\024\014\020\015\022\016\014\017\015" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\030\005\115\006\011\007" +
                            "\012\010\010\011\034\012\032\013\024\014\020\015\022" +
                            "\016\014\017\015\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\003\036\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\020\043\001\001\000\004" +
                            "\023\052\001\001\000\004\020\045\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\023\071\001\001\000\004\023" +
                            "\070\001\001\000\002\001\001\000\004\023\064\001\001" +
                            "\000\004\023\063\001\001\000\004\023\062\001\001\000" +
                            "\004\023\061\001\001\000\004\023\060\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\020\067" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\022\076" +
                            "\001\001\000\004\022\103\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\022\101\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\021\107\023\110\001\001\000\006\021\114\023\110" +
                            "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
                            "\112\023\110\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\023\123\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\021\126\023\110\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\022\135\001\001\000\002" +
                            "\001\001\000\002\001\001\000\030\005\140\006\011\007" +
                            "\012\010\010\011\034\012\032\013\024\014\020\015\022" +
                            "\016\014\017\015\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\004\150\001" +
                            "\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 0;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}





    // Connect this parser to a scanner!

    private String graficos = "";
    private String graficosEjecutar = "";
    private List<ErrorParser> errores = new LinkedList<>();


    public String getGraficos (){
        return this.graficos;
    }

    public String getGraficosEjecutar (){
        return this.graficosEjecutar;
    }

    public List<ErrorParser> getErrores (){
        return this.errores;
    }

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){

        List<Integer> expected = expected_token_ids();
        List<String> tokenExpected = new LinkedList<>();

        for (Integer id : expected) {
            tokenExpected.add(symbl_name_from_id(id));
        }

        errores.add(new ErrorParser(s.left, s.right, s.value.toString(), tokenExpected));


        /*
        errores.push("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        */
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico
     * en el que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
                (s.left)+ " Columna "+s.right+". Componente " + s.value +
                " no reconocido.");
    }





    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /** Constructor */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int                        CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack            CUP$Parser$stack,
                int                        CUP$Parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= inicio EOF
                {
                    Object RESULT =null;
                    int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // inicio ::= declaracion_grafico ejecutar_grafico
                {
                    Object RESULT =null;
                    int graphicsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int graphicsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String graphics = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    int ejectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int ejectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String eject = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    graficos = graphics;
                    graficosEjecutar = eject;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // declaracion_grafico ::= INICIO_DECLARACION TIPO_GRAFICO LLAVE_I atributos LLAVE_D declaracion_grafico
                {
                    String RESULT =null;
                    int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
                    int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
                    String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    int atrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int atrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    String atr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int othersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int othersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String others = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT=tipo+"{\n"+atr+"\n}\n"+others;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // declaracion_grafico ::= INICIO_DECLARACION TIPO_GRAFICO LLAVE_I atributos LLAVE_D
                {
                    String RESULT =null;
                    int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                    int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                    String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    int atrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int atrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String atr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT=tipo+"{\n"+atr+"\n}";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // ejecutar_grafico ::= EJECUTAR PARENTESIS_I STRINGP PARENTESIS_D PUNTO_COMA ejecutar_grafico
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = "Ejecutar("+a+")\n"+b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar_grafico",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // ejecutar_grafico ::= EJECUTAR PARENTESIS_I STRINGP PARENTESIS_D PUNTO_COMA
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    RESULT="Ejecutar(" + a + ")";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar_grafico",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // atributos ::= atributo PUNTO_COMA atributos
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT=a+"\n"+b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // atributos ::= atributo PUNTO_COMA
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT=a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // atributos ::= error atributos
                {
                    String RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // atributo ::= a_titulo
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // atributo ::= a_unir
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // atributo ::= a_ejex
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // atributo ::= a_ejey
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // atributo ::= a_etiquetas
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // atributo ::= a_valores
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // atributo ::= a_tipo
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // atributo ::= a_total
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // atributo ::= a_extra
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // a_titulo ::= TITULO_GRAFICO DOS_PUNTOS STRINGP
                {
                    String RESULT =null;
                    int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT="titulo: "+titulo;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_titulo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // a_unir ::= UNIR DOS_PUNTOS CORCHETE_I pares_ordenados CORCHETE_D
                {
                    String RESULT =null;
                    int paresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int paresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String pares = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT="unir:["+pares + "]";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_unir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // a_ejex ::= EJEX DOS_PUNTOS CORCHETE_I val_string CORCHETE_D
                {
                    String RESULT =null;
                    int palabrasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int palabrasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String palabras = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT="ejex:["+palabras + "]";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_ejex",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // a_ejey ::= EJEY DOS_PUNTOS CORCHETE_I val_number CORCHETE_D
                {
                    String RESULT =null;
                    int numerosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int numerosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String numeros = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT="ejey:["+ numeros + "]";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_ejey",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // a_etiquetas ::= ETIQUETAS DOS_PUNTOS CORCHETE_I val_string CORCHETE_D
                {
                    String RESULT =null;
                    int palabrasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int palabrasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String palabras = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT="etiquetas:["+palabras + "]";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_etiquetas",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // a_valores ::= VALORES DOS_PUNTOS CORCHETE_I val_number CORCHETE_D
                {
                    String RESULT =null;
                    int numerosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int numerosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    String numeros = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT="valores:["+ numeros + "]";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_valores",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // a_tipo ::= TIPO DOS_PUNTOS CANTIDAD
                {
                    String RESULT =null;
                    RESULT="tipo: CANTIDAD";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_tipo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // a_tipo ::= TIPO DOS_PUNTOS PORCENTAJE
                {
                    String RESULT =null;
                    RESULT="tipo: PORCENTAJE";
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_tipo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // a_total ::= TOTAL DOS_PUNTOS math_operation
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT="total"+a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_total",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // a_extra ::= EXTRA DOS_PUNTOS STRINGP
                {
                    String RESULT =null;
                    int palabraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int palabraright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String palabra = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT="extra: "+palabra;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_extra",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // pares_ordenados ::= LLAVE_I math_operation COMA math_operation LLAVE_D COMA pares_ordenados
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                    Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    String valores = "{"+a+", "+b+"}" + c;
                    RESULT = valores;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pares_ordenados",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // pares_ordenados ::= LLAVE_I math_operation COMA math_operation LLAVE_D
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

                    String valores = "{"+a+", "+b+"}";
                    RESULT = valores;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pares_ordenados",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // pares_ordenados ::= error pares_ordenados
                {
                    String RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pares_ordenados",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // val_string ::= STRINGP COMA val_string
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    String valores = a +", " + b;
                    RESULT = valores;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_string",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // val_string ::= STRINGP
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT=a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_string",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // val_string ::= error val_string
                {
                    String RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_string",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // val_number ::= math_operation COMA val_number
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    String valores = a +", " + b;
                    RESULT = valores;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_number",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // val_number ::= math_operation
                {
                    String RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_number",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // val_number ::= error val_number
                {
                    String RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_number",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // math_operation ::= math_operation SIGNO_MAS math_operation
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a+b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // math_operation ::= math_operation SIGNO_MENOS math_operation
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a-b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // math_operation ::= math_operation SIGNO_POR math_operation
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a*b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // math_operation ::= math_operation SIGNO_DIVISION math_operation
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a/b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // math_operation ::= PARENTESIS_I math_operation PARENTESIS_D
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // math_operation ::= SIGNO_MENOS math_operation
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a*-1;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // math_operation ::= NUMERO_ENTERO
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // math_operation ::= NUMERO_DECIMAL
                {
                    Double RESULT =null;
                    int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
                    Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_operation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int                        CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack            CUP$Parser$stack,
                int                        CUP$Parser$top)
                throws java.lang.Exception
        {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
